syntax = "proto3";

package planet;

option go_package = "planetpb";

// We can define our planet and all of its corresponding data here, we can split this up later if we want.
message Planet {
    string planet_id = 1;
    string name = 2;
    OrbitalInfo orbitalinfo = 3;
    PhysicalInfo physicalinfo = 4;
}

message OrbitalInfo {
    float aphelion = 1; // golang float32
    float perihelion = 2; // golang float32
    float semimajoraxis = 3; // golang float32
    float eccentricity = 4; // golang float32
    float orbitalperiod = 5; // golang float32
    float synodicperiod = 6; // golang float32
    float avgorbitalspeed = 7; // golang float32
    float meananomaly = 8; // golang float32
    float inclination = 9; // golang float32
    float longitudeofascendingnode = 10; // golang float 32
    uint32 satelites = 11; // golang uint32
}

message PhysicalInfo {
    string meanradius = 1; 
    string equatorialradius = 2; 
    string polarradius = 3; 
    string flattening = 4; 
    float surfacearea = 5; // golang float32
    float volume = 6; // golang float32
    double mass = 7; // golang float64
    float meandensity = 8; // golang float32
    float surfacegravity = 9; // golang float32
    string momentofintertiafactor = 10;
    float escapevelocity = 11; // golang float32
    float siderealrotationperiod = 12;
    float equatorialrotationvelocity = 13;
    float axialtilt = 14;
    float northpolerightascension = 15;
    float northpoledeclination = 16;
    float albedo = 17;
    SurfaceTemp surfacetemp = 18;
    ApparentMagnitude apparentmagnitude = 19;
}

message AtmosphereInfo{
    float surfacepressure = 1;
    repeated Element element = 2;
}

message Element{
    string name = 1;
    float percentasdecimal = 2; // golang float32(We will calculate the percent composition of this element based on the float provided)
}

message SurfaceTemp {
    uint32 min = 1; // golang uint32
    uint32 max = 2; // golang uint32
    uint32 mean = 3; // golang uint32
}

message ApparentMagnitude{
    sint32 min = 1; // golang int32
    sint32 max = 2; // golang int32
}

message ReadPlanetRequest {
    string planet_id = 1;   // We can fetch by the mongodb ID, which we will have on the frontend Vue app.
}

message ReadPlanetResponse {
    Planet planet = 1; // List of planets
}

message ListPlanetRequest {
}

message ListPlanetResponse {
    repeated Planet planet = 1; // List of planets
}

service PlanetService {
    rpc ReadPlanet (ReadPlanetRequest) returns (ReadPlanetResponse); // return NOT_FOUND if not found
    rpc ListPlanet (ListPlanetRequest) returns (ListPlanetResponse); // return NOT_FOUND if not found
}